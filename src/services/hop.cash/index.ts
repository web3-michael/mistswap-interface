import { BigNumber } from '@ethersproject/bignumber'
import { hexZeroPad } from '@ethersproject/bytes';
import { id } from '@ethersproject/hash';
import { Web3Provider } from "@ethersproject/providers";
import { formatUnits } from '@ethersproject/units';
import { sha256 } from "ethers/utils/sha2";

// The smart contract CrossChainTransfer's deployed address
const CCTransAddress = "0xBAe8Af26E08D3332C7163462538B82F0CBe45f2a"
// The incoming account's address on BCH main chain
const IncomeAddrOnBCH = "bitcoincash:qqa0dj5rwaw2s4tz88m3xmcpjyzry356gglq7zvu80"
// The outgoing account's address on BCH main chain
const PoolAddrOnBCH = "bitcoincash:qzteyuny2hdvvcd4tu6dktwx9f04jarzkyt57qel0y"
// The incoming account's address on smartBCH side chain
const IncomeAddrOnSmartBCH = "0x3207d65b4D45CF617253467625AF6C1b687F720b"
// The outgoing account's address on smartBCH side chain
const PoolAddrOnSmartBCH = "0xa659c0434399a8D0e15b8286b39f8d97830F8F91"

const literal = <L extends string>(l: L): L => l;

// 'in' to sbch; 'out' from sbch
export const HopDirection = {
  in: literal("in"),
  out: literal("out")
};
export type HopDirection = typeof HopDirection[keyof typeof HopDirection];

export const HopStage = {
  unknown: literal("unknown"),
  init: literal("init"),
  deposit: literal("deposit"),
  sent: literal("sent"),
  settled: literal("settled"),
	cancelled: literal("cancelled")
}
export type HopStage = typeof HopStage[keyof typeof HopStage];

export interface HopStatus {
  direction: HopDirection
  stage: HopStage
  bchTxId: string
  sbchTxId: string
  bchAmount: string
  sbchAmount: string
  fromBlock: number
  depositAddress: string
}

// Initialize the hop-wallet, whose private key is the hash of a signature generated by web3-wallet
export async function initHopWallet(provider: Web3Provider) {
  window.hopStatus = { stage: HopStage.unknown } as HopStatus

	const signer = provider.getSigner();
	const myAddr = await signer.getAddress();

  if (!window.hopwallet || (window.hopwallet && window.hopwallet.myAddr !== myAddr)) {
    let signature;
		try {
			signature = await signer.signMessage(`[Grant-Hop-Wallet]【授权Hop钱包】\n${myAddr}\nI hereby grant this website the permission to access my Hop-Wallet for above address.\n我郑重授权此网站访问以上地址的Hop钱包。`);
		} catch {
			window.hopStatus.stage = HopStage.cancelled;
			return {cashAddr: null, fromBlock: 0}
		}
    let privKey = BigNumber.from(sha256(signature));
    const prime = BigNumber.from("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140");
    privKey = privKey.mod(prime);
    const wif = hex2wif(privKey.toHexString().substr(2));
    window.hopwallet = await Wallet.fromWIF(wif);
		window.hopwallet.myAddr = myAddr
  }

	// show hop-wallet's address in text and QRCode
	const cashAddr = window.hopwallet.getDepositAddress();

	// hop-wallet will watch the incoming coins inside the hopInRefresh function
	const fromBlock = await provider.getBlockNumber();
  window.FromBlock = fromBlock;

  window.hopStatus.stage = HopStage.deposit;
  window.hopStatus.fromBlock = fromBlock;
  window.hopStatus.depositAddress = cashAddr;

  return {cashAddr, fromBlock};
}

export async function getBchPoolBalance(): Promise<string> {
  const bchPoolWallet = await Wallet.watchOnly(PoolAddrOnBCH);
	return await bchPoolWallet.getBalance("bch");
}

export async function getSmartBchPoolBalance(provider): Promise<string> {
	const balance256 = await provider.getBalance(PoolAddrOnSmartBCH);
	return formatUnits(balance256);
}

// Check whether there is enough coins sent into hop-wallet, and if so, send them to IncomeAddrOnBCH, with the 
// cross-chain target address (ccTargetAddr) embedded inside OP_RETURN
// Check whether PoolAddrOnBCH has sent coins to the cross-chain target address
export async function hopInRefresh(provider: Web3Provider) {
  window.hopStatus.stage = HopStage.deposit
  window.hopStatus.direction = HopDirection.in

	const signer = provider.getSigner();
	const ccTargetAddr = await signer.getAddress();

	// Check Main Chain
	const maxAmount = await window.hopwallet.getMaxAmountToSend(2);
	const balance = await window.hopwallet.getBalance('sat');
	if(balance >= 1000000/*0.01BCH*/) {
		const amt = maxAmount.sat - 400 // 400 sats margin, for getMaxAmountToSend is not accurate
		const txData = await window.hopwallet.send([
			OpReturnDataFromString(ccTargetAddr), //first output is just OP_RETURN
			{cashaddr: IncomeAddrOnBCH, value: amt, unit: "sat"}, //second output has BCH
		]);
		const a = amt/100000000.0;
		const b = balance/100000000.0;
		// const text = T(`[First Step] Found ${b} BCH in your Hop-Wallet. After miner fees, sending ${a} BCH to the bridge. Please do not refresh, or progress will be hidden. Transaction id: //【第一步成功】发现Hop钱包余额为${b}，扣除矿工费之后，${a}个BCH已被发送至跨链桥。请不要刷新，否则将无法追踪进度。交易ID：`);
		// AddToDiv("inProgress", text, makeBchTxLink(txData.txId));
		// document.getElementById("inHistory").style.display = "none"
    window.hopStatus.stage = HopStage.sent
    window.hopStatus.bchTxId = txData.txId
    window.hopStatus.bchAmount = String(a)
	}
	window.FromBlock = await showCCTransLogs("inProgress", provider, ccTargetAddr, window.FromBlock);
}

// show the cross-chain transfer logs in a "divId" div
export async function showCCTransLogs(divId, provider, ccTargetAddr, fromBlock) {
	// Check Side Chain's Transfer event, because coins are send through SEP206 calls
	const Bridged = id("Bridged(bytes32,address,address,uint256)");
	const myAddrPad32 = hexZeroPad(ccTargetAddr, 32);
	const senderAddrPad32 = hexZeroPad(PoolAddrOnSmartBCH, 32);
	const senderAddrList = [senderAddrPad32]
	var tokenIdList = [];
	const hopAddr = "0xBAe8Af26E08D3332C7163462538B82F0CBe45f2a";
	var filter = {address: hopAddr, topics: [Bridged, null, senderAddrPad32, myAddrPad32], toBlock: 0, fromBlock: 0};
	filter.toBlock = 10000*10000 // a very large value
	filter.fromBlock = fromBlock;
	var logs = await provider.getLogs(filter);
	//console.log("found logs", logs);
	const end = Math.max(0, logs.length-20) // at most 20 entries
	let amount;
  for(var i=logs.length-1; i>=end; i--) {
		const h = logs[i].blockNumber
		fromBlock = h + 1;
		amount = formatUnits(logs[i].data);

    window.hopStatus.stage = HopStage.settled
    window.hopStatus.sbchTxId = logs[i].transactionHash
    window.hopStatus.sbchAmount = amount
    window.hopStatus.fromBlock = fromBlock
    break;
		// const text = T(`[Cross-chain finished, reload for another tx] After deducting the cross-chain fee, ${amount} BCH were sent to your smartBCH account at height ${h}, in this transaction: //【跨链完成，进行另一笔交易请刷新】扣除跨链手续费之后，${amount}个BCH被发送至您的smartBCH账户，区块高度${h}，交易ID：`);
		// window.FinishedCrossChainOnce = true;
		// AddToDiv(divId, text, makeSmartBchTxLink(logs[i].transactionHash));
	}

  return fromBlock;
}
